---
title: "Hands-on exercise01"
author: "Yuheng Liang"
format: html
editor: visual
date: "August 16, 2024"
date-modified: "September 9,2024"
execute: 
  eval: true
  echo: true
  freeze: true
---

# Hands-O1

# Hands-On Exercise 1: Geospatial Data Science with R

## 1.0 overview

Geospatial Data Science is a process of importing, wrangling, integrating, and processing geographically referenced data sets. In this hands-on exercise, you will learn how to perform geospatial data science tasks in R by using **sf** package.

## 2.0 setting

### 2.1 Data Acquisition

Data are key to data analytics including geospatial analytics. Hence, before analysing, I extract the necessary data sets from the following sources:

-   Master Plan 2014 Subzone Boundary (Web) from \[ [data.gov.sg](https://data.gov.sg/)\]
-   Pre-Schools Location from \[[data.gov.sg](https://data.gov.sg/)\]
-   Cycling Path from \[[LTADataMall](https://www.mytransport.sg/content/mytransport/home/dataMall.html)\]
-   Latest version of Singapore Airbnb listing data from \[ [Inside Airbnb](http://insideairbnb.com/get-the-data.html)\]

### 2.2 Installing R-Packages

-   **sf** for importing, managing, and processing geospatial data, and
-   **tidyverse** for performing data science tasks such as importing, wrangling and visualising data.

### 2.3 Importing DATA and PACKAGES

install the required packages using the code chunk below

​

```{R}
pacman::p_load(sf, tidyverse)
```

Import Shapefiles

using `st_read()`to open shapefiles

-   

    ###### when the input geospatial data is in shapefile format, two arguments will be used

-   no extension

### Importing polygon feature data in shapefile format

```{R}
 mpsz = st_read(dsn = "data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP", layer = "MP14_SUBZONE_WEB_PL")
```

### Importing polyline feature data in shapefile form

```{R}
cyclingpath = st_read(dsn = "data/geospatial/CyclingPath_Jul2024", layer = "CyclingPathGazette")
```

### Importing GIS data in kml format

```{R}
preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```

## 3.0 Checking the Content of A Simple Feature Data Frame

### 3.1 Working with *st_geometry()*

print only displays basic information of the feature class

```{R}
st_geometry(mpsz)
```

### 3.2 Working with glimpse()

*glimpse()* report more about the associated attribute information in the data frame.

```{R}
glimpse(mpsz)
```

### 3.3 Working with *head()*

use to reveal complete information of a feature object

```{R}
head(mpsz, n=5)  
```

## 4 Plotting the Geospatial Data

In geospatial data science, by looking at the feature information is not enough. We are also interested to visualise the geospatial features. This is the time you will find plot() of R Graphic comes in very handy as shown in the code chunk below.

```{R}
plot(mpsz) 
```

The default plot of an sf object is a multi-plot of all attributes, up to a reasonable maximum as shown above. We can, however, choose to plot only the geometry by using the code chunk below.

```{R}
plot(st_geometry(mpsz))  
```

Alternatively, we can also choose the plot the sf object by using a specific attribute as shown in the code chunk below.

```{R}
plot(mpsz["PLN_AREA_N"]) 
```

## 5 Working with Projection

### 5.1 Assigning EPSG code to a simple feature data frame

One of the common issue that can happen during importing geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.

```{R}
 st_crs(mpsz)
```

But when we read until the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be [3414](https://epsg.io/3414).

n order to assign the correct EPSG code to `mpsz` data frame, *st_set_crs()* of **sf** package is used as shown in the code chunk below.

```{R}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

```{R}
st_crs(mpsz3414)
```

**Notice that the EPSG code is 3414 now.**

### 5.2 Transforming the projection of preschool from wgs84 to svy21

```{R}
st_geometry(preschool)
```

R

**Let us perform the projection transformation by using the code chunk below.**

```{R}
preschool3414 <- st_transform(preschool, 
                               crs = 3414)
```

Next, let us display the content of preschool3414 sf data frame as shown below

```{R}
st_geometry(preschool3414)
```

## 6 Importing and Converting An Aspatial Data

### 6.1 Importing the aspatial data

we will use **read_csv()** of **readr** package to import `listing.csv` as shown the code chunk below

```{R}
listings <- read_csv("data/geospatial/listings.csv")
```

```{R}
list(listings) 
```

### 6.2 Creating a simple feature data frame from an aspatial data frame

```{R}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
```

```{R}
 glimpse(listings_sf)
```

## 7 Geoprocessing with sf package

Besides providing functions to handling (i.e. importing, exporting, assigning projection, transforming projection etc) geospatial data, **sf** package also offers a wide range of geoprocessing (also known as GIS analysis) functions.

In this section, I perform two commonly used geoprocessing functions, namely [buffering](https://www.gislounge.com/buffers-in-gis/) and point in polygon count.

### 7.1 Buffering

The scenario:

The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

The solution:

Firstly, [*st_buffer()*](https://r-spatial.github.io/sf/reference/geos_unary.html) of **sf** package is used to compute the 5-meter buffers around cycling paths

```{R}
buffer_cycling <- st_buffer(cyclingpath, 
                               dist=5, nQuadSegs = 30)
```

This is followed by calculating the area of the buffers as shown in the code chunk below.

```{R}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

Lastly, sum() of Base R will be used to derive the total land involved

```{R}
sum(buffer_cycling$AREA)
```

### 7.2 Point-in-polygon count

The scenario:

A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

The solution:

The code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using [st_intersects()](https://r-spatial.github.io/sf/reference/geos_binary_pred.html). Next, [*length()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/length) of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.

```{R}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
```

You can check the summary statistics of the newly derived *PreSch Count* field by using *summary()* as shown in the code chunk below.

```{R}
summary(mpsz3414$`PreSch Count`)
```

Min. 1st Qu. Median Mean 3rd Qu. Max. 0.00 0.00 4.00 7.09 10.00 72.00

To list the planning subzone with the most number of pre-school, the top_n() of **dplyr** package is used as shown in the code chunk below.

```{R}
top_n(mpsz3414, 1, `PreSch Count`)
```

**calculate the density of pre-school by planning subzone**

uses **st_area()** of sf package to derive the area of each planning subzone

```{R}
mpsz3414$Area <- mpsz3414 %>% st_area()
```

Next, mutate() of dplyr package is used to compute the density by using the code chunk below.

```{R}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

## 8 Exploratory Data Analysis

### 8.1 EDA Histogram

```{R}
hist(mpsz3414$`PreSch Density`)
```

### 8.2 **ggplot2**

```{R}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
       x = "Pre-school density (per km sq)",
       y = "Frequency")
```

# n Exercise 1: Geospatial Data Science with R

## 1.0 overview

Geospatial Data Science is a process of importing, wrangling, integrating, and processing geographically referenced data sets. In this hands-on exercise, you will learn how to perform geospatial data science tasks in R by using **sf** package.

## 2.0 setting

### 2.1 Data Acquisition

Data are key to data analytics including geospatial analytics. Hence, before analysing, I extract the necessary data sets from the following sources:

-   Master Plan 2014 Subzone Boundary (Web) from \[ [data.gov.sg](https://data.gov.sg/)\]
-   Pre-Schools Location from \[[data.gov.sg](https://data.gov.sg/)\]
-   Cycling Path from \[[LTADataMall](https://www.mytransport.sg/content/mytransport/home/dataMall.html)\]
-   Latest version of Singapore Airbnb listing data from \[ [Inside Airbnb](http://insideairbnb.com/get-the-data.html)\]

### 2.2 Installing R-Packages

-   **sf** for importing, managing, and processing geospatial data, and
-   **tidyverse** for performing data science tasks such as importing, wrangling and visualising data.

### 2.3 Importing DATA and PACKAGES

install the required packages using the code chunk below

​pacman::p_load(sf, tidyverse)

Import Shapefiles

using `st_read()`to open shapefiles

-   

    ###### when the input geospatial data is in shapefile format, two arguments will be used

-   no extension

### Importing polygon feature data in shapefile format

```{R}
 mpsz = st_read(dsn = "data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP", layer = "MP14_SUBZONE_WEB_PL")
```

### Importing polyline feature data in shapefile form

```{R}
cyclingpath = st_read(dsn = "data/geospatial/CyclingPath_Jul2024", layer = "CyclingPathGazette")
```

### Importing GIS data in kml format

```{R}
preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```

## 3.0 Checking the Content of A Simple Feature Data Frame

### 3.1 Working with *st_geometry()*

print only displays basic information of the feature class

```{R}
st_geometry(mpsz)
```

### 3.2 Working with glimpse()

*glimpse()* report more about the associated attribute information in the data frame.

```{R}
glimpse(mpsz)
```

### 3.3 Working with *head()*

use to reveal complete information of a feature object

```{R}
head(mpsz, n=5)  
```

## 4 Plotting the Geospatial Data

In geospatial data science, by looking at the feature information is not enough. We are also interested to visualise the geospatial features. This is the time you will find plot() of R Graphic comes in very handy as shown in the code chunk below.

```{R}
plot(mpsz) 
```

The default plot of an sf object is a multi-plot of all attributes, up to a reasonable maximum as shown above. We can, however, choose to plot only the geometry by using the code chunk below.

```{R}
plot(st_geometry(mpsz))  
```

Alternatively, we can also choose the plot the sf object by using a specific attribute as shown in the code chunk below.

```{R}
plot(mpsz["PLN_AREA_N"]) 
```

## 5 Working with Projection

### 5.1 Assigning EPSG code to a simple feature data frame

One of the common issue that can happen during importing geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.

```{R}
 st_crs(mpsz)
```

But when we read until the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be [3414](https://epsg.io/3414).

n order to assign the correct EPSG code to `mpsz` data frame, *st_set_crs()* of **sf** package is used as shown in the code chunk below.

```{R}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

```{R}
st_crs(mpsz3414)
```

**Notice that the EPSG code is 3414 now.**

### 5.2 Transforming the projection of preschool from wgs84 to svy21

```{R}
st_geometry(preschool)
```

**Let us perform the projection transformation by using the code chunk below.**

```{R}
preschool3414 <- st_transform(preschool, 
                               crs = 3414)
```

Next, let us display the content of preschool3414 sf data frame as shown below

```{R}
st_geometry(preschool3414)
```

## 6 Importing and Converting An Aspatial Data

### 6.1 Importing the aspatial data

we will use **read_csv()** of **readr** package to import `listing.csv` as shown the code chunk below

```{R}
listings <- read_csv("data/geospatial/listings.csv")
```

```{R}
list(listings) 
```

### 6.2 Creating a simple feature data frame from an aspatial data frame

```{R}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)

```

```{R}
 glimpse(listings_sf)
```

## 7 Geoprocessing with sf package

Besides providing functions to handling (i.e. importing, exporting, assigning projection, transforming projection etc) geospatial data, **sf** package also offers a wide range of geoprocessing (also known as GIS analysis) functions.

In this section, I perform two commonly used geoprocessing functions, namely [buffering](https://www.gislounge.com/buffers-in-gis/) and point in polygon count.

### 7.1 Buffering

The scenario:

The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

The solution:

Firstly, [*st_buffer()*](https://r-spatial.github.io/sf/reference/geos_unary.html) of **sf** package is used to compute the 5-meter buffers around cycling paths

```{R}
buffer_cycling <- st_buffer(cyclingpath, 
                               dist=5, nQuadSegs = 30)
```

This is followed by calculating the area of the buffers as shown in the code chunk below.

```{R}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

Lastly, sum() of Base R will be used to derive the total land involved

```{R}
sum(buffer_cycling$AREA)
```

### 7.2 Point-in-polygon count

The scenario:

A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

The solution:

The code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using [st_intersects()](https://r-spatial.github.io/sf/reference/geos_binary_pred.html). Next, [*length()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/length) of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.

```{R}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
```

You can check the summary statistics of the newly derived *PreSch Count* field by using *summary()* as shown in the code chunk below.

```{R}
summary(mpsz3414$`PreSch Count`)
```

Min. 1st Qu. Median Mean 3rd Qu. Max. 0.00 0.00 4.00 7.09 10.00 72.00

To list the planning subzone with the most number of pre-school, the top_n() of **dplyr** package is used as shown in the code chunk below.

```{R}
top_n(mpsz3414, 1, `PreSch Count`)
```

**calculate the density of pre-school by planning subzone**

uses **st_area()** of sf package to derive the area of each planning subzone

```{R}
mpsz3414$Area <- mpsz3414 %>% st_area()
```

Next, mutate() of dplyr package is used to compute the density by using the code chunk below.

```{R}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

## 8 Exploratory Data Analysis

### 8.1 EDA Histogram

```{R}
hist(mpsz3414$`PreSch Density`)
```

### 8.2 **ggplot2**

```{R}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
       x = "Pre-school density (per km sq)",
       y = "Frequency")
```
