---
title: "Hands-on exercise02"
author: "Yuheng Liang"
format: html
editor: visual
date: "August 23, 2024"
date-modified: "August 24,2024"
execute: 
  eval: true
  echo: true
  freeze: true
---

# Hands-on exercise02

## 1.0 Overview

## 2.0 Importing

### 2.1 Package

In this hands-on exercise we will use Five package.

-   tamp for create thematic map (key R package)

-   readr for importing delimited text file

-   tidyr for tidying data

-   dplyr for wrangling data

-   sf for handling geospatial data

(readr, tidyr and dplyr are part of tidyverse package, so we only need to install tidyverse)

```{R}
pacman::p_load(sf, tmap, tidyverse)
```

### 2.2 Data

#### 2.2.1 Download data

Two data will be used in this Hands-on Ex

-   Master Plan 2014 Subzone Boundary in ESRI shapefile format. (This is a geospatial data)\[ [data.gov.sg](https://data.gov.sg/)\]
-   Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format. (This is an aspatial data fike, it did not contains any coordinates values, but it is PA and SZ fields can be used as unique identifiers to geocode to MP_14_SUBZONE_WEB_PL )\[ [singstat.gov.sg](https://www.singstat.gov.sg/)\]

#### 2.2.2 Importing Data into R

**Geospatial Data**

we used the **st_read()** function of package to import shapefile as a simple feature data frame called mpsz.

```{R}
mpsz <- st_read(dsn = "data/aspatial/MasterPlan2014SubzoneBoundaryWebSHP", 
                layer = "MP14_SUBZONE_WEB_PL")
```

examine the content:

```{R}
mpsz
```

Why when we use mpsz only ten records will be displayed?

Due to the pagination, it is a technique used to divide large datasets into smaller, more manageable pages.

**Attribute Data**

Import *respopagsex2011to2020.csv* file into Rstudio and save the file into R dataframe called **popdata**.

we will use read_csv() function of readr package

```{R}
popdata <- read_csv("data/aspatial/respopagesexfa2011to2020/respopagesexfa2011to2020.csv")
```

#### 2.2.3 Data Preparation

Prepare a data table with 2020 values.(data includes: PA, SZ, YOUNG, ENCONOMY ACTIVE, AGR, TOTAL, DEPENDECY)

-   YOUNG: age group 0 to 4 until age groyup 20 to 24,

-   ECONOMY ACTIVE: age group 25-29 until age group 60-64

-   AGED: age group 65 and above

-   TOTAL: all age group

-   DEPENDENCY: the ratio between young and aged against economy active group

##### 2.2.3.1 data wrangling

we will use *pivot_wider()* of **tidyr** package and *mutate()*, *filter()*, *group_by()* and *select()* of **dplyr** package to data wrangling and transforamtion functions.

filter() : filter rows from a data frame based on a specific condition.

group_by(): used to group data base on one or more variables.

summarize(): this function is to summarize data within groups.

sum(): calculates the sum of the values

ungroup(): use to remove the grouping

pivot_wider(): pivot data from long format to a wide format.

mutate(): create new variables ot modify existing ones within a data frame.

```{R}
popdata2020 <- popdata %>%
  filter(Time == 2020) %>%
  group_by(PA, SZ, AG) %>%
  summarise(`POP` = sum(`Pop`)) %>%
  ungroup()%>%
  pivot_wider(names_from=AG, 
              values_from=POP) %>%
  mutate(YOUNG = rowSums(.[3:6])) %>%
mutate(`ECONOMY ACTIVE` = rowSums(.[7:13])+
rowSums(.[13:15]))%>%
mutate(`AGED`=rowSums(.[16:21])) %>%
mutate(`TOTAL`=rowSums(.[3:21])) %>%  
mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)
/`ECONOMY ACTIVE`) %>%
  select(`PA`, `SZ`, `YOUNG`, 
       `ECONOMY ACTIVE`, `AGED`, 
       `TOTAL`, `DEPENDENCY`)
```

##### 2.2.3.2 joining the attribute data and geospatial data.

```{R}
head(mpsz)
```

hand the mpsz are in uppercase

```{R}
head(popdata2020)
```

But the values of popdata2020 are made up of upper- and lowercase. So we need to convert all the values in popdata2020 to uppercase.

```{R}
popdata2020 <- popdata2020 %>%
  mutate_at(.vars = vars(PA, SZ), 
          .funs = list(toupper)) %>%
  filter(`ECONOMY ACTIVE` > 0)
```

next we will use the left_join() to join the geographical data and attribute table using planning subzone name.

by = c(): providing a named vector to specify the join keys.

```{R}
mpsz_pop2020 <- left_join(mpsz, popdata2020,
                          by = c("SUBZONE_N" = "SZ"))
```

Save the data as an r object

```{R}
write_rds(mpsz_pop2020, "data/rds/mpszpop2020.rds")
```

## 3.0 Choroleth Mapping Geospatial data using tmap

There are two approaches can be used to prepare thematic map using tmap

-   Plotting a thematic map quickly by using qtm()

-   Plotting highly customisable thematic map by using tmap elements.

### 3.1 qtm()

Display directly in the Rstudio Plots pane as static images

```{R}
tmap_mode("plot")
```

draw a cartographic standard choropleth map as shown below:

fill argument is used to map the attribute

```{R}
qtm(mpsz_pop2020, 
    fill = "DEPENDENCY")
```

### 3.2 tmap's elements

To draw a high quality cartographic choropleth map, we should use tmap's

tm_shape(): the dataframe

tm_fill(): set the color for the map

-   DEPENDENCY: variable

-   style: divides the data into quantiles for color mapping

-   palette: Uses a blue color palette

-   title: set the title for the legend

tm_layout(): Customize the layout of the map.

tm_borders(): add border to the map.

tm_compass(): Add a compass to the map

tm_scale_bar():Adds a scale bar to the map

tm_grid(): add a grid to the map.

tm_credits(): adds credits or a legend to the map.

```{R}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "Dependency ratio") +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

#### 3.2.1 drawing a base map

tm_shape() is used to define the input data

tm_polygons() is used to draw the planning subzone polygons

```{R}
tm_shape(mpsz_pop2020) +
  tm_polygons()
```

#### 3.2.2 *tm_polygons()*

we just need to assign the target variable

```{R}
tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY")
```

#### 3.2.3 *tm_fill()* and \*tm_border()\*\*

 *tm_polygons()* is a wraper of *tm_fill()* and *tm_border()*. 

*tm_fill()* shades the polygons by using the default colour sheme

tm_borders() adds the borders of the shapefile

```{R}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY")
```

add the boundary of the planning subzone:

```{R}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY") +
  tm_borders(lwd = 0.1,  alpha = 1)
```

The *alpha* argument is used to define transparency number\
1:not tramsparent

0: totally transparent

any other three arguments fot tm_borders():\
col:border colour

lwd:border line width

lty:border line type

### 3.3 **Data classification methods of tmap**

**tmap** provides a total ten data classification methods.

namely: *fixed*, *sd*, *equal*, *pretty* (default), *quantile*, *kmeans*, *hclust*, *bclust*, *fisher*, and *jenks*.

#### 3.3.1 classification methods

5 classes:

```{R}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5)
```

*equal* data classification method:

```{R}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5)
```

the distribution of quantile data classification method are more evenly distributed then equal data classification method.

DIY1

Using what you had learned, prepare choropleth maps by using different classification methods supported by tmap and compare their differences.

```{R}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "kmeans") +
  tm_borders(alpha = 0.5)
```

```{R}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "hclust") +
  tm_borders(alpha = 0.5)
```

```{R}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "bclust") +
  tm_borders(alpha = 0.5)
```

DIY2

Preparing choropleth maps by using similar classification method but with different numbers of classes (i.e. 2, 6, 10, 20). Compare the output maps, what observation can you draw?

```{R}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 2,
          style = "quantile") +
  tm_borders(alpha = 0.5)
```

```{R}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          style = "quantile") +
  tm_borders(alpha = 0.5)
```

```{R}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 10,
          style = "quantile") +
  tm_borders(alpha = 0.5)
```

```{R}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 20,
          style = "quantile") +
  tm_borders(alpha = 0.5)
```

#### 3.3.2 Plotting choropleth map with custome break

display the descriptive statistics of **DEPENDENCY** field

```{R}
summary(mpsz_pop2020$DEPENDENCY)
```

we set break point at 0.60, 0.70, 0.80, and 0.90 

we also need to include a minimum and maximum, which we set at 0 and 1.00

```{R}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +
  tm_borders(alpha = 0.5)
```

### 3.4 **Colour Scheme**

#### 3.4.1 Using ColourBrewer palette

Blues

```{R}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          style = "quantile",
          palette = "Blues") +
  tm_borders(alpha = 0.5)
```

-Green

```{R}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "-Greens") +
  tm_borders(alpha = 0.5)
```

 the colour scheme has been reversed

### 3.5 Layout

#### 3.5.1 Map Legend

There are lots of options are provided to change the placement, format and appearance of the legend.

```{R}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "jenks", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone \n(Jenks classification)",
            main.title.position = "center",
            main.title.size = 1,
            legend.height = 0.45, 
            legend.width = 0.35,
            legend.outside = FALSE,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```

#### 3.5.2 Map Style

**tmap** allows a wide variety of layout settings to be changed. They can be called by using *tmap_style()*

```{R}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "-Greens") +
  tm_borders(alpha = 0.5) +
  tmap_style("classic")
```

#### 3.5.3 Cartographic Furniture

Beside map style, **tmap** also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.

In the code chunk below, *tm_compass()*, *tm_scale_bar()* and *tm_grid()* are used to add compass, scale bar and grid lines onto the choropleth map.

```{R}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "No. of persons") +
  tm_layout(main.title = "Distribution of Dependency Ratio \nby planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

To reset the default style, refer to the code chunk below.

```{R}
tmap_style("white")
```

### 3.6 **Small Multiple Choropleth Maps**

#### 3.6.1 assigning multiple values to at least one of the aesthetic arguments

created by defining ***ncols*** in **tm_fill()**

```{R}
tm_shape(mpsz_pop2020)+
  tm_fill(c("YOUNG", "AGED"),
          style = "equal", 
          palette = "Blues") +
  tm_layout(legend.position = c("right", "bottom")) +
  tm_borders(alpha = 0.5) +
  tmap_style("white")
```

In this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments.

```{R}
tm_shape(mpsz_pop2020)+ 
  tm_polygons(c("DEPENDENCY","AGED"),
          style = c("equal", "quantile"), 
          palette = list("Blues","Greens")) +
  tm_layout(legend.position = c("right", "bottom"))
```

#### 3.6.2 *tm_facets()*

multiple small choropleth maps are created by using **tm_facets()**

```{R}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "Blues",
          thres.poly = 0) + 
  tm_facets(by="REGION_N", 
            free.coords=TRUE, 
            drop.shapes=TRUE) +
  tm_layout(legend.show = FALSE,
            title.position = c("center", "center"), 
            title.size = 20) +
  tm_borders(alpha = 0.5)
```

#### 3.6.3 *tmap_arrange()*

multiple small choropleth maps are created by creating multiple stand-alone maps with **tmap_arrange()**

```{R}
youngmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("YOUNG", 
              style = "quantile", 
              palette = "Blues")

agedmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("AGED", 
              style = "quantile", 
              palette = "Blues")

tmap_arrange(youngmap, agedmap, asp=1, ncol=2)
```

### 3.7 **Mappping Spatial Object Meeting a Selection Criterion**

```{R}
tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N=="CENTRAL REGION", ])+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(legend.outside = TRUE,
            legend.height = 0.45, 
            legend.width = 5.0,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```
