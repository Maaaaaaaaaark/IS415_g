---
title: "Hands-on exercise03"
author: "Yuheng Liang"
format: html
editor: visual
date: "August 27, 2024"
date-modified: "August 30,2024"
execute: 
  eval: true
  echo: true
  freeze: true
---

# Hands-on ex03 **Order Spatial Point Patterns Analysis Methods**

## 1.1 Overview

Spatial Point Pattern Analysis is the evaluation of the pattern or distribution, of a set of points on a surface.

## 2 Data

### 2.1 Data set

There are three data set will be use in this Hands-on_ex03. They are:

-   CHILDCARE

-   MP14_SUBZONE_WEB_PL

-   CostalOutline

### 2.2 Loading R packages

In this exercise, five R packages will be used they are:

-   sf

-   spatstat

-   raster

-   maptools

-   tmap

Use the code chunk below to install and launch the five R packages.

```{R}
pacman::p_load(sf, raster, spatstat, tmap, tidyverse, devtools,sp)
```

### 2.3 Importing Data

st_read() of SF package will be used to import these Data

```{R}
childcare_sf <- st_read("data/child-care-services-geojson.geojson") %>%
  st_transform(crs = 3414)
```

```{R}
sg_sf <- st_read(dsn = "data", layer="CostalOutline")
```

```{R}
mpsz_sf <- st_read(dsn = "data", 
                layer = "MP14_SUBZONE_WEB_PL")
```

### 2.4 Data Wrangling

To ensure they are projected in same projection system.

**Checking CRS**

```{R}
st_crs(childcare_sf)
```

```{R}
st_crs(sg_sf)
```

```{R}
st_crs(mpsz_sf)
```

we need to changing the referencing system to Singapore nation projected coordinate system.

```{R}
mpsz_sf <- st_transform(mpsz_sf,crs = 3414)
```

```{R}
st_crs(mpsz_sf)
```

```{R}
sg_sf <- st_transform(sg_sf,crs = 3414)
```

```{R}
st_crs(sg_sf)
```

### 2.5 Mapping the geospatial data set

```{R}
tmap_options(check.and.fix = TRUE)
```

```{R}
tm_shape(sg_sf)+tm_polygons()+tm_shape(mpsz_sf)+tm_polygons()+tm_shape(childcare_sf)+tm_dots()
```

**note:\
**tm_shape( ): specifies the underlying map data.

tm_polygons( ):draw polygons.

tm_dots(): draw the points in the maps

Alternatively, we can also prepare a pin map by using the code chunk below.

```{R}
tmap_mode('view')+tm_shape(childcare_sf)+tm_dots()
```

Advantage of this interacive pin map:

-   allows us to navigate and zoom around the map freely.

-   query the information of each simple feature.

-   can change the background of the internet map layer.

## 3 Geospatial Data wrangling

### 3.1 Converting sf data frames to sp's Spatial\* class

```{R}
childcare <- as_Spatial(childcare_sf)
```

display

```{R}
head(childcare)
```

```{R}
mpsz <- as_Spatial(mpsz_sf)
sg <- as_Spatial(sg_sf)
```

```{R}
head(mpsz)
```

```{R}
head(sg)
```

note:

The main purpose of converting sf dataframes to the Spatial\* class of sp is for compatibility, so that some old R packages or functions can be used.

Checking the conversion:

```{R}
sg
```

```{R}
mpsz
```

```{R}
childcare
```

All the geospatial data have been converted into their respective sp's Spatial\* classes now.

### 3.2 **Converting the Spatial\* class into generic sp format**

**spatstat** requires the analytical data in ***ppp*** object form.

There is no direct way to convert a Spatial classes into **ppp** object. So we need to convert the **Spatial\* class** into the **spatial** object first.

```{R}
childcare_sp <- as(childcare,"SpatialPoints")
sg_sp <- as(sg,"SpatialPolygons")
```

display shows below:

```{R}
childcare_sp
```

```{R}
sg_sp
```

note:

different between Spatial classes and generic sp object?

-   **Spatial Classes** provide specific structures for representing different types of spatial data.

<!-- -->

-   **Generic sp Objects** offer a more general way to work with spatial data, allowing for greater flexibility.

### 3.3 Converting the generic sp format into spatstat's ppp format

use as.ppp() function of spatstat to convert the spatial data into spatstat's ppp object format.

```{R}
childcare_ppp <- as.ppp(st_coordinates(childcare_sf), st_bbox(childcare_sf))
```

```{R}
childcare_ppp
```

plot childcare_ppp, childcare_sf and examine the different.

```{R}
plot(childcare)
```

```{R}
plot(childcare_sf)
```

```{R}
plot(childcare_ppp)
```

take a qucik look at the summary statistics of the newly created ppp object

```{R}
summary(childcare_ppp)
```

```{R}
summary(childcare_sf)
```

```{R}
summary(childcare)
```

We can notice the the warning message about duplicates. The statistical methodology used for spatial point patterns processes is based largely on the assumption that process are simple, that is , that the point cannot be coincident.

### 3.4 Handling duplicated points

check the duplication in a ppp object by using:

```{R}
any(duplicated(childcare_ppp))
```

count the number of co-indicence point

```{R}
multiplicity(childcare_ppp)
```

how many location have more than one point event

```{R}
sum(multiplicity(childcare_ppp)>1)
```

The output shows that there are 128 duplicated point events.

View the locations of these duplicate point events.

```{R}
tmap_mode('view')
tm_shape(childcare)+tm_dots(alpha=0.4,size=0.05)
```

```{R}
tmap_mode('plot')
```

Three ways to spot the duplicate points from the map shown above.

-   delete the duplicates, but this way will also mean that some useful point events will be lost.

-   jittering: add a small perturbation to the duplicate points

-   make each point "unique" then attach the duplicates of the points to the patterns as marks, then analytical techniques that take into account these marks.

jittering approach:

```{r}
childcare_ppp_jit <- rjitter(childcare_ppp,retry=TRUE,nsim=1,drop=TRUE)
```

check if any duplicayed points in this geospatial data.

```{R}
any(duplicated(childcare_ppp_jit))
```

### 3.5 Creating owin object

In spatstat, OWIN is specially designed to represent this polygonal region

covert sgSpatialPolygon object into owin object of spatstat

```{R}
sg_owin <- as.owin(sg_sf)
```

the output can be displayed by using plot() function

```{R}
plot(sg_owin)
```

summary function of Base R.

```{R}
summary(sg_owin)
```

### 3.6 combining point events object and owin object

extract childcare events that are located within Singapore

```{R}
childcareSG_ppp = childcare_ppp[sg_owin]
```

output:

```{r}
summary(childcareSG_ppp)
```

```{R}
plot(childcareSG_ppp)
```

## 4 First-order Spatial Potint Patterns Analysis

using spatstat package to perform first-order SPPA

-   Kernel density estimation(KDE)

-   Nearest Neighbour

### 4.1 Kernel density estimation(KDE)

#### 4.1.1 Computing kernel density estimation using automatic bandwidth selection method

The code chunk below computes a kernel density by using the following configurations of density() of spatstat:

-   bw.diggle(): automatic bandwidth selection method.

-   The smoothing kernel used is gaussian, which is the default.

-   The intensity esimate is corrected for edge effect bias by using mesthod described by Jones and Diggle. The default is FALSE.

```{r}
kde_chidcareSG_bw <- density(childcareSG_ppp,sigma=bw.diggle,edge=TRUE,kernel="gaussian")
```

display:

```{R}
plot(kde_chidcareSG_bw)
```

retrieve the bandwidth used to compute the kde

```{R}
bw <- bw.diggle(childcareSG_ppp)
```

```{R}
bw
```

#### 4.1.2 Rescalling KDE values

rescale.ppp() is used to covert the unit of measurement from meter to kilometer

```{r}
childcareSG_ppp.km <- rescale.ppp(childcareSG_ppp,1000,"km")
```

we can re-run density() using the resale data and plot the output kde map.

```{R}
kde_childcare.bw <- density(childcareSG_ppp.km, sigma=bw.diggle,edge=TRUE,kernel="gaussian")
```

display:

```{R}
plot(kde_childcare.bw)
```

### 4.2 Working with different automatic badwidth methods

three other spatstat function can be used to determine the bandwidth,beside bw.diggle().

-   bw.CvL()

-   bw.scott()

-   bw.ppl()

the bandwidth return by bw.Cvl()

```{R}
 bw.CvL(childcareSG_ppp.km)
```

the bandwidth return by bw.scott()

```{R}
bw.scott(childcareSG_ppp.km)
```

the bandwidth return by bw.ppl()

```{R}
bw.ppl(childcareSG_ppp.km)
```

the bandwidth return by bw.diggle():

```{R}
bw.diggle(childcareSG_ppp.km)
```

note:

the different:

bw.CvL: this method selects the bandwidth by minimizing the cross-validation error.

bw.scoott: is a simple heuristic based on the sample size and the standard deviation of the data.

bw.ppl: uses a pluf-in approach to estimate the optimal bandwidth

bw.diggle: an empirical approach that select the bandwidth based on exploratory data analysis.

compare the output of using bw.diggle and bw.ppl methods

```{R}
kdf_childcareSG.ppl <- density(childcareSG_ppp.km, sigma=bw.ppl, edge=TRUE, Kernel="gaussian")
```

```{R}
kdf_childcareSG.scott <- density(childcareSG_ppp.km, sigma=bw.scott, edge=TRUE, Kernel="gaussian")
```

```{r}
kdf_childcareSG.diggle <- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, Kernel="gaussian")
```

```{R}
kdf_childcareSG.Cvl <- density(childcareSG_ppp.km, sigma=bw.CvL, edge=TRUE, Kernel="gaussian")
```

```{R}
par(mfrow=c(1,2))
plot(kdf_childcareSG.Cvl, main = "bw.cvl")
plot(kdf_childcareSG.scott , main ="bw.scott")
```

### 4.3 working with different kernel methods

There are three more other options beside density.ppp()

-   Epanechnikov

-   Quartic

-   Dics

```{R}
par(mfrow=c(2,2))
plot(density(childcareSG_ppp.km,sigma=bw.ppl,edge=TRUE,kernel="gaussian"),main="guassian")
plot(density(childcareSG_ppp.km,sigma=bw.ppl,edge=TRUE,kernel="epanechnikov"),main="Epanechnikov")
plot(density(childcareSG_ppp.km,sigma=bw.ppl,edge=TRUE,kernel="quartic"),main="Quartic")
plot(density(childcareSG_ppp.km,sigma=bw.ppl,edge=TRUE,kernel="disc"),main="Disc")
```

## 5 Fixed and Adaptive KDE

### 5.1 Computing KDE by using fixed bandwidth

Compute a KDE layer by defining a bandwidth of 600 meter. The sigma value used is 0.6.

```{r}
kde_chidcareSG_600 <- density(childcareSG_ppp.km,sigma=0.6,edge=TRUE,kernel="gaussian")
```

```{r}
plot(kde_chidcareSG_600)
```

### 5.2 Computing KDE by using adaptive bandwidth

Fixed bandwidth method is very sensitive to highly skew distributuin of spatial point patterns over geographical units. To overcome this problems is using adaptive bandwidth instead.

```{R}
kde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method="kernel")
plot(kde_childcareSG_adaptive)
```

compare the fixed and adaptive kernel density estimation

```{r}
par(mfrow=c(1,2))
plot(kde_childcare.bw,main="1")
plot(kde_childcareSG_adaptive, main = "Adaptive bandwidth")
```

### 5.3 Converting KDE output into grid object.

The result is the same, we just convert it so that it is suitable for mapping purpose

```{R}
library(sp)
library(spatstat)
```

```{R}
gridded_kde_childcareSG_bw <- as(kde_childcare.bw,"SpatialGridDataFrame")
spplot(gridded_kde_childcareSG_bw)
```

#### 5.3.1 Converting gridded output into raster

convert the gridded kernal density objects into RasterLayer object by using raster() of raster package

```{r}
kde_childcareSG_bw_raster  <- raster(kde_childcare.bw)
```

Look at the properties of kde_childcareSG_bw_raster RasterLayer.

```{R}
kde_childcareSG_bw_raster
```

crs is NA

#### 5.3.2 Assigning projection systems

```{R}
projection(kde_childcareSG_bw_raster) <- CRS("+init=EPSG:3414")
kde_childcareSG_bw_raster
```

CRS property is completed.

### 5.4 Visualising the output in tmap

we will display the raster in cartographic quality map using tmap package.

```{R}
tm_shape(kde_childcareSG_bw_raster)+tm_raster("layer", palette = "viridis")+tm_layout(legend.position = c("right","bottom"),frame = FALSE)
```

### 5.5 comparing Spatial Point Pattern using KDE

#### 5.5.1 Extracting study area

extract target planning areas.

```{r}
pg <- mpsz_sf %>%
  filter(PLN_AREA_N == "PUNGGOL")
tm <- mpsz_sf %>%
  filter(PLN_AREA_N == "TAMPINES")
ck <- mpsz_sf %>%
  filter(PLN_AREA_N == "CHOA CHU KANG")
jw <- mpsz_sf %>%
  filter(PLN_AREA_N == "JURONG WEST")
```

Plotting target planning areas

```{R}
par(mfrow=c(2,2))
plot(pg,main="ponnggol")
```

```{R}
plot(tm,main ="Tampines")
```

```{R}
plot(ck, main ="choa chu kang")
```

```{r}
plot(jw, main="Jurong West")
```

#### 5.5.2 creating owin object

convert these sf object into owin object that is required by spastat.

```{R}
pg_owin =as.owin(pg)
tm_owin =as.owin(tm)
ck_owin =as.owin(ck)
jw_owin =as.owin(jw)
```

#### 5.5.3 Combining childcare points and the study area

we can extract childcare that is within the specific region to do our analysis later on.

```{R}
childcare_pg_ppp =childcare_ppp_jit[pg_owin]
childcare_tm_ppp =childcare_ppp_jit[tm_owin]
childcare_ck_ppp = childcare_ppp_jit[ck_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]
```

next teansfrom the unit of measurement from metre lilometre

```{r}
childcare_pg_ppp.km = rescale.ppp(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale.ppp(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale.ppp(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale.ppp(childcare_jw_ppp, 1000, "km")
```

plot these area

```{R}
par(mfrow=c(2,2))
plot(childcare_pg_ppp.km, main="Punggol")
plot(childcare_tm_ppp.km, main="Tampines")
plot(childcare_ck_ppp.km, main="Choa Chu Kang")
plot(childcare_jw_ppp.km, main="Jurong West")
```

#### 5.5.4 Computing KDE

compute the KDE of these Four planning area.

```{R}
par(mfrow=c(2,2))
plot(density(childcare_pg_ppp.km,sigma=bw.diggle,edge=TRUE,kernel="gaussian"),main="Punggol")
plot(density(childcare_tm_ppp.km,sigma=bw.diggle,edge=TRUE,kernel="gaussian"),main="Tempines")
plot(density(childcare_ck_ppp.km,sigma=bw.diggle,edge=TRUE,kernel="gaussian"),main="Choa Chu Kang")
plot(density(childcare_jw_ppp.km,sigma=bw.diggle,edge=TRUE,kernel="gaussian"),main="JUrong West")
```

#### 5.5.5 Computing fixed bandwidth KDE

use 250m as the bandwidth

```{R}
par(mfrow=c(2,2))
plot(density(childcare_ck_ppp.km,sigma=0.25,edge=TRUE,kernel="gaussian"),main="Chou Chu Kang")
plot(density(childcare_jw_ppp.km,sigma=0.25,edge=TRUE,kernel="gaussian"),
main="JUrong West")
plot(density(childcare_pg_ppp.km,sigma=0.25,edge=TRUE,kernel="gaussian"),
main="Punggol")
plot(density(childcare_tm_ppp.km,sigma=0.25,edge=TRUE,kernel="gaussian"),
main="Tampines")
```

## 6 Nearest Neighbout Analysis

In this section, we will perform the Clark-Evans test of aggregation for a spatial point pattern by using clarkevans.test() of statspat. The test hypotheses are: \* Ho = The distribution of childcare services are randomly distributed. \* H1= The distribution of childcare services are not randomly distributed. The 95% confident interval will be used.

### 6.1 Testing spatial point patterns using Clark and Evans Test

```{R}
clarkevans.test(childcareSG_ppp,correction="none",clipregion="sg_owin",alternative=c("clustered"),nsim=99)
```

### 6.2 Clark and Evans Test: Choa Chu Kang planning area

```{R}
clarkevans.test(childcare_ck_ppp,correction="none",clipregion="sg_owin",alternative=c("two.s"),nsim=999)
```

### 6.3 Clark and Evans Test: Tampines planning area

```{R}
clarkevans.test(childcare_tm_ppp,correction="none",clipregion=NULL,alternative=c("two.s"),nsim=999)
```

# 2nd Order Spatial Point Patterns Analysis Methods

## 7 choa chu kang planning area

### 7.1 computing G-function estimation

```{R}
G_ck = Gest(childcare_ck_ppp, correction = "border")
plot(G_ck, xlim=c(0,500))
```

### 7.2 Performing Complete Sptial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be condicted Ho= The distribution of childcare services at Choa Chu Kang are randomly distributed H1= The distribution of childcare services at choa chu kang are not randomly distributed. The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

```{R}
G_ck.csr <- envelope(childcare_ck_ppp, Gest, nsim=999)
```

```{r}
plot(G_ck.csr)
```

### 7.2 Tamping planning area

#### 7.2.1 Computing G-function estimation

```{R}
G_tm = Gest(childcare_tm_ppp,correction = "best")
```

```{R}
plot(G_tm)
```

#### 7.2.2 performing complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows: Ho = The distribution of childcare services at Tampines are randomly distributed. H1= The distribution of childcare services at Tampines are not randomly distributed. The null hypothesis will be rejected is p-value is smaller than alpha value of 0.001

```{R}
G_tm.csr <- envelope(childcare_tm_ppp,Gest, correction="all", nsim=999)
```

```{r}
plot(G_tm.csr)
```

## 8 Analysing Spatial Point Process Using F-Function

The F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape. \### 8.1 choa chu kang planning area \#### 8.1.1 Computing F-function estimation

```{R}
F_ck = Fest(childcare_ck_ppp)
plot(F_ck)
```

### 8.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted.The hypothesis and test are as follows: Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed. H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed. The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001. Monte Carlo test with F-fucntion

```{R}
F_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)
```

```{R}
plot(F_CK.csr)
```

### 8.3 Tampines planning area

#### 8.3.1 Computing F-function estimation

Monte Carlo test with F-function

```{r}
F_tm = Fest(childcare_tm_ppp, correction = "best")
plot(F_tm)
```

#### 8.3.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows: Ho = The distribution of childcare services at Tampines are randomly distributed. H1= The distribution of childcare services at Tampines are not randomly distributed. The null hypothesis will be rejected is p-value is smaller than alpha value of 0.001. The code chunk below is used to perform the hypothesis testing.

```{r}
F_tm.csr <- envelope(childcare_tm_ppp,Fest,correction="all", nsim = 999)
```

```{R}
plot(F_tm.csr)
```

## 9 Analysing Spatial Point Process Using K-function

K-function measures the number of events found up to a given distance of any particular event. \### 9.1 Choa Chu Kang planning area \#### 9.1.1 Computing K-function estimate

```{R}
K_ck = Kest(childcare_ck_ppp, correction = "Ripley")
plot(K_ck, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")
```

#### 9.1.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows: Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed. H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed. The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001. The code chunk below is used to perform the hypothesis testing.

```{R}
K_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
```

```{R}
plot(K_ck.csr, . - r ~ r, xlab="d", ylab="K(d)-r")
```

### 9.2 Tampines Planning area

#### 9.2.1Computing K-function estimation

```{R}
K_tm = Kest(childcare_tm_ppp, correction = "Ripley")
```

```{R}
plot(K_tm, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)", xlim=c(0,1000))
```

#### 9.2.2

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows: Ho = The distribution of childcare services at Tampines are randomly distributed. H1= The distribution of childcare services at Tampines are not randomly distributed. The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001. The code chunk below is used to perform the hypothesis testing.

```{R}
K_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
```

```{R}
plot(K_tm.csr, . - r ~ r,xlab="d", ylab="K(d)-r", xlim=c(0,500))
```

## 10 Analysing Spatial Point Process Using L-Function

### 10.1 choa chu kang planning area

#### 10.1.1 computing L function estimation

```{R}
L_ck <- Lest(childcare_ck_ppp, correction = "Ripley")
plot(L_ck, . -r ~ r, ylab= "L(d)-r", xlab = "d(m)")
```

#### 10.1.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows: Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed. H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed. The null hypothesis will be rejected if p-value if smaller than alpha value of 0.001. The code chunk below is used to perform the hypothesis testing.

```{R}
L_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

```{R}
plot(L_ck.csr, . - r ~ r, xlab="d", ylab="L(d)-r")
```

### 10.2 Tampines planning area

#### 10.2.1 Computing L-function estimate

```{R}
L_tm <- Lest(childcare_tm_ppp, correction = "Ripley")
plot(L_tm, . -r ~ r, ylab= "L(d)-r", xlab = "d(m)", xlim=c(0,1000))
```

#### 10.2.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows: Ho = The distribution of childcare services at Tampines are randomly distributed. H1= The distribution of childcare services at Tampines are not randomly distributed. The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001. The code chunk below will be used to perform the hypothesis testing.

```{R}
L_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(L_tm.csr, . - r ~ r, xlab="d", ylab="L(d)-r", xlim=c(0,500))
```
