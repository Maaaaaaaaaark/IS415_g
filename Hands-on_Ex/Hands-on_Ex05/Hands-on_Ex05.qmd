---
title: "Hands-on exercise05"
author: "Yuheng Liang"
format: html
editor: visual
date: "September 12, 2024"
date-modified: "September 12,2024"
execute: 
  eval: true
  echo: true
  freeze: true
---

# Hands-on exercise 05 Spatial Weights and Applications

## 1.0 Data and Package

### 1.1 Importing package

Install spdep, sf tmap and tidyverse package of R

```{R}
pacman :: p_load(sf,spdep,tmap,tidyverse,knitr)
```

### 1.2 Getting the Data into R

Impoting shapefile into r environment

```{R}
hunan <- st_read(dsn ="data/geospatial" , layer ="Hunan")
```

Import csv file into r environment

```{R}
hunan2012 <- read_csv("data/aspatial/hunan_2012.csv")
```

Performing relational join

```{r}
hunan <- left_join(hunan,hunan2012)%>%
  select(1:4, 7,9, 15)
```

## 2.0 Visualising Regional Development Indicator

prepare a basemap and a choropleth map showing the distribution

```{r}
basemap <- tm_shape(hunan) +tm_polygons() +tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

## 3.0 Computing Contiguity Spatial Weights

### 3.1 Computing(Queen) contiguity based neighbours

computr Queen contiguity weight matrix

```{R}
wm_q <- poly2nb(hunan,queen = TRUE)
summary(wm_q)
```

The summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one heighbours.

wm_q lists all neighboring polygons to see the neighbors for the first polygon in the object, type:

```{r}
wm_q[[1]]
```

Polygon 1 has 5 neighbors. The numbers represent the polygon IDs as stored in hunan SpatialPolygonsDataFrame clas

we can retrive the country name of Ploygon ID=1 by using the code chunk below:

```{R}
hunan$County[1]
```

To reveal the county names of the five neighbouring polygons, the code chunk will be used:

```{R}
hunan$NAME_3[c(2,3,4,57,85)]
```

we can retrive the GDPPC of these five countries by using the code chunk below

```{R}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

display the complete weight matrix by using str()

```{R}
str(wm_q)
```

### 3.2 Creating(ROOK) contiguity based neighbours

compute Rook contiguity weight matrix

```{R}
wm_r <- poly2nb(hunan,queen=FALSE)
summary(wm_r)
```

The summary report above shows that there are 88 area units in Hunan. The most connect area unit has 10 neighbours. There are two area units with only one heighbours. \### 3.3 Visualising contiguity weights To get our longitude values we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation \[\[\]\] and q. this allow us to get only only the longitude, which is the first value in each centroid.

```{R}
longitude <- map_dbl(hunan$geometry,~st_centroid(.x)[[1]])
```

we do the same for latitude with one key difference. we access the second value per each centroid with\[\[2\]\]

```{R}
latitude <- map_dbl(hunan$geometry,~st_centroid(.x)[[2]])
```

we use cbind to put longitude and latitude into the same object

```{R}
coords <- cbind(longitude,latitude)
```

check the first few obsecvation to see if things are formatted correctly

```{R}
head(coords)
```

#### 3.3.1 Plotting Queen contiguity based neighbours map

```{R}
plot(hunan$geometry,border = "lightgrey")
plot(wm_q,coords, pch = 19,cex=0.6, add=TRUE,col="red")
```

#### 3.3.2 Plotting Rook contiguity based neighbours map

```{R}
plot(hunan$geometry,border = "lightgrey")
plot(wm_r,coords, pch=19,cex=0.6,add = TRUE,col="red")
```

#### 3.3.3 Plotting both Queen and Rock contiguity based neighbours maps

```{R}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="Queen Contiguity")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
plot(hunan$geometry, border="lightgrey", main="Rook Contiguity")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

## 4.0 Compiuting distance based neighbours

### 4.1 Determine the cut-off distance

Firstly, we need to determint thee upper limit for distance band by using the steps below: \* Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other using knearneigh() of spdep. \* Convert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb(). \* Return the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise. \* Remove the list structure of the returned object by using unlist().

```{r}
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1,coords,longlat = TRUE))
summary(k1dists)
```

the largest first nearest neighbour distance is 61.79km, so using this as the upper threshold gives certainty that all units will have at least one neighbour

### 4.2 Computing fixed distance weight matrix

compute the distance weight matric by using dnearneigh()

```{R}
wm_d62 <- dnearneigh(coords, 0,62, longlat = TRUE)
wm_d62
```

Average number of links: 3.681818: This indicates the average number of neighbors for each region. A higher average means that regions tend to have more connections with others.

next,we will use str() to display the content of wm_d62 weight matrix.

```{R}
str(wm_d62)
```

Another way to display the structure of the weight matrix is to combine table() and card() of spdep

```{R}
table(hunan$County, card(wm_d62))
```

```{R}
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
```

```{R}
table(n_comp$comp.id)
```

#### 4.2.1 Plotting fixed distance weigh matrix

Next we will plot the distance weight matrix by using the code chunk below

```{R}
plot(hunan$geometry,border = "lightgrey")
plot(wm_d62,coords, add=TRUE)
plot(k1,coords,add=TRUE,col = "red",length=0.08)
```

The red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.

we can plot bloth of them next to each other by using the code chunk below

```{R}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="1st nearest neighbours")
plot(k1, coords, add=TRUE, col="red", length=0.08)
plot(hunan$geometry, border="lightgrey", main="Distance link")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)
```

### 4.3 Computing adaptive distance weight matrix

One of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours

It is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.

```{R}
knn6 <- knn2nb(knearneigh(coords,k=6))
knn6
```

we can display the content of the matrix by using str()

```{R}
str(knn6)
```

#### 4.3.1 Plotting distance based neighbours

plot the weight matrix

```{R}
plot(hunan$geometry,border = "lightgrey")
plot(knn6,coords,pch=19,cex=0.6,add=TRUE,col="red")
```

## 5.0 Weights based on IDW

compute the distance between areas by using nbdists() of spdep

```{R}
dist <- nbdists(wm_q,coords,longlat = TRUE)
ids <- lapply(dist,function(x) 1/(x))
ids
```

## 6.0 Row-standardised Weights Matrix

assign weights to each neighboring polygon

```{R}
rswm_q <- nb2listw(wm_q,style = "W",zero.policy = TRUE)
rswm_q
```

The zero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.

see the weight of the first polygon's eight neighbors type:

```{R}
rswm_q$weights[10]
```

Each neighbor is assigned a 0.125 of the total weight. This means that when R computes the average neighboring income values, each neighborâ€™s income will be multiplied by 0.125 before being tallied.

derive a row standardised distance weight matrix

```{r}
rswm_ids <- nb2listw(wm_q,glist = ids,style = "B",zero.policy = TRUE)
rswm_ids
```

```{R}
summary(unlist(rswm_ids$weights))
```

## 7.0 Application of Spatial Weight Matrix

### 7.1 Spatial lag with row-standardized weights

compute the average neighbor GDPPC valie for each polygon.

```{R}
GDPPC.lag <- lag.listw(rswm_q,hunan$GDPPC)
GDPPC.lag
```

We can append the spatially lag GDPPC values onto hunan sf data frame by using the code chunk below.

```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
```

```{R}
head(hunan)
```

plot both the GDPPC and spatial lag GDPPC

```{R}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

### 7.2 Spatial lag as a sum of neighboring values

```{R}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q,glist = b_weights,style = "B")
b_weights2
```

USE lag.listw to compute a lag variable from our weight and GDPPC

```{R}
lag_sum <- list(hunan$NAME_3,lag.listw(b_weights2,hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3","lag_sum GDPPC")
```

examine the result by using the code chunk below

```{R}
lag_sum
```

append the lag_sum GDPPCfield into hunan sf data frame by using the code chunk below.

```{R}
hunan <- left_join(hunan,lag.res)
```

plot

```{R}
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

### 7.3 Spatial window average

The spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights.

```{R}
wm_qs <- include.self(wm_q)
```

look at the neightbout list of area \[1\]

```{R}
wm_qs[[1]]
```

has six neighbours instead of five.

Now we obtain weights with nb2listw()

```{R}
wm_qs <- nb2listw(wm_qs)
wm_qs
```

create the lag variable from our weight structure and GDPPC variable

```{R}
lag_w_avg_gpdpc <- lag.listw(wm_qs,hunan$GDPPC)
lag_w_avg_gpdpc
```

convert the lag variable listw object into a data.frame by using as.data.frame().

```{r}
lag.list.wm_qs <- list(hunan$NAME_3,lag.listw(wm_qs,hunan$GDPPC))
lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
colnames(lag_wm_qs.res) <- c("NAME_3","lag_window_avg GDPPC")
```

The third command line on the code chunk above renames the field names of lag_wm_q1.res object into NAME_3 and lag_window_avg GDPPC respectively.

used to append lag_window_avg GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.

```{R}
hunan <- left_join(hunan, lag_wm_qs.res)
```

Compare the values of lag GDPPC and Spatial window average

```{r}
hunan %>%
  select("County","lag GDPPC","lag_window_avg GDPPC")%>%
  kable()
```

plot

```{R}
w_avg_gdppc <- qtm(hunan,"lag_window_avg GDPPC")
tmap_arrange(lag_gdppc,w_avg_gdppc,asp = 1,ncol = 2)
```

### 7.4 Spatial window sum

add the diagonal element to the neighbour list

```{R}
wm_qs <- include.self(wm_q)
wm_qs
```

assign binary weights to the neighbour structure

```{R}
b_weights <- lapply(wm_qs,function(x)0*x+1)
b_weights[1]
```

use nb2listw() and glist() to explicitly assign weight values

```{R}
b_weights2 <- nb2listw(wm_qs,glist = b_weights,style = "B")
b_weights2
```

compute the lag variable with lag.listw().

```{R}
w_sum_gdppc <- list(hunan$NAME_3,lag.listw(b_weights2,hunan$GDPPC))
w_sum_gdppc
```

convert the lag variable listw object into a data.frame by using as.data.frame()

```{R}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3","w_sum GDPPC")
```

The second command line on the code chunk above renames the field names of w_sum_gdppc.res object into NAME_3 and w_sum GDPPC respectively.

append w_sum GDPPC values onto hunan sf data.frame by using left_join() of dplyr package

```{R}
hunan <- left_join(hunan,w_sum_gdppc.res)
```

compare the values of lag GDPPC and Spatial window average

```{R}
hunan %>%
  select("County", "lag_sum GDPPC", "w_sum GDPPC") %>%
  kable()
```

plot

```{R}
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)
```
