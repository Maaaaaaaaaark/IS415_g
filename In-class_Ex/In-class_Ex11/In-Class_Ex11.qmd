---
title: "In-Class_Ex11"
author: "Yuheng Liang"
format: html
editor: visual
date: "Nov 4, 2024"
date-modified: "Nov 4, 2024"
execute: 
  eval: true
  echo: true
  freeze: true
---

# In class exe11

## data

loading the R package

```{r}
pacman::p_load(tidyverse,sf,tmap,httr,performance)
```

importing data

```{r}
folder_path <- "data/aspatial"
file_list <- list.files(path = folder_path,
                        pattern = "^realis.*\\.csv$",
                        full.names =TRUE)
realis_data <- file_list %>%
  map_dfr(read_csv)
```

Warngling data

```{r}
condo_resale <- realis_data %>%
  mutate(`Sale Date` = dmy(`Sale Date`)) %>%
  filter(`Type of Sale` == "Resale" &
           `Property Type` == "Condominium")
```

### Geocoding

Prepating data

```{R}
postcode <- unique(condo_resale$`Postal Code`)
```

Geocoding

```{R}
url <- "https://onemap.gov.sg/api/common/elastic/search"
found <- data.frame()
not_found <- data.frame()

for (postcode in postcode){
  query <- list('searchVal'=postcode, 'returnGeom'='Y', 
                'getAddrDetails'='Y', 'pageNum'='1')
  res <- GET(url, query=query)
  if ((content(res)$found)!=0){
    found <- rbind(found, data.frame(content(res))[4:13])
  } else {not_found = data.frame(postcode)
  }
}
```

Tidying field names

```{R}
found <- found %>%
  select(c(6:8)) %>%
  rename(POSTAL = `results.POSTAL`,
         XCOORD = `results.X`,
         YCOORD = `results.Y`)
```

## Converting to point Feature
```{R}
condo_resale_geocoded = left_join(
  condo_resale, found, 
  by = c('Postal Code' = 'POSTAL'))
```

```{r}
condo_resale_sf <- st_as_sf(condo_resale_geocoded, 
                            coords = c("XCOORD",
                                       "YCOORD"),
                            crs=3414)
```

## Cleaning Spatial Data
cheacking for overlapping point features
```{r}
overlapping_points <- condo_resale_sf%>%
  mutate(overlap = lengths(st_equals(.,.))>1)
```

spatial jitterling
```{r}
condo_resale <- condo_resale_sf%>%
  st_jitter(amount = 2)
```

prov_cleaned <- sf_polygon%>%
group_by(ADMl_EN)%>%
filter(area == max(area))%>%
ungroup()%>%
slect(.area)%>%
select(ASMl_en)





